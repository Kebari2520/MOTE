{model1 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 0*i
total1 ~~ r*total1
total1 ~~ r*total2
total3 ~~ r*total3
'}
order = c("df", "chisq", "rmsea", "srmr", "cfi")
model1.fit = growth(model1, data = data)
fitmeasures(model1.fit, fit.measures = order)
master = read.csv("assign 4 mgcfa.csv")
master = master[, c(1:14, 17:24)]
master[, c(3, 6, 8, 11, 16:18)] =
abs(master[, c(3, 6, 8, 11, 16:18)]-8)
#intercept only model (intercept average)
{model1 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 0*i
total1 ~~ r*total1
total1 ~~ r*total2
total3 ~~ r*total3
'}
order = c("df", "chisq", "rmsea", "srmr", "cfi")
model1.fit = growth(model1, data = nomiss)
fitmeasures(model1.fit, fit.measures = order)
#latent means
loadings = parameterestimates(multisteps$fit.residuals)
randomload = subset(loadings, group == "1" & op == "=~", select = "est")
notrandomload = subset(loadings, group == "2" & op == "=~", select = "est")
randommult = apply([random , 3:ncol(random)], 1, function(x) { x * randomload })
randomload = subset(loadings, group == "Random Random" & op == "=~", select = "est")
notrandomload = subset(loadings, group == "Not Random" & op == "=~", select = "est")
randommult = apply([random , 3:ncol(random)], 1, function(x) { x * randomload })
randommult = apply(random[ , 3:ncol(random)], 1, function(x) { x * randomload })
randommult = apply(random[ , 3:ncol(random)], 1, function(x) { x * randomload })
randomload = subset(loadings, group == "1" & op == "=~", select = "est")
notrandomload = subset(loadings, group == "2" & op == "=~", select = "est")
randommult = apply(random[ , 3:ncol(random)], 1, function(x) { x * randomload })
notrandommult = apply(notrandom[ , 3:ncol(notrandom)], 1, function(x) { x * notrandomload })
randommult = as.data.frame(randommult)
randommult = t(randommult) #flip it so it's people per row
notrandommult = as.data.frame(notrandommult)
notrandommult = t(notrandommult)
ranlatent = rowMeans(randommult)
notranlatent = rowMeans(notrandommult)
sd(ranlatent)
sd(notranlatent)
ranlatent
t.test(ranlatent, notranlatent,
alternative = "two.sided",
paired = FALSE,
var.equal = TRUE,
na.action = TRUE)
cohen.d(ranlatent, notranlatent)
library(effsize)
cohen.d(ranlatent, notranlatent)
{model2 = '
i =~ 1*total1 + 1*total2 + 1*total3
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model2.fit = growth(model2)
fitmeasures(model2.fit, fit.measures = order)
model2.fit = growth(model2, data = nomiss)
fitmeasures(model2.fit, fit.measures = order)
summary(model2.fit)
model1.fit = growth(model1, data = master)
fitmeasures(model1.fit, fit.measures = order)
fitmeasures(model1.fit)
model3.fit = growth(model3, data = master)
{model3 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
s ~ 0*1 #average slope across time points
s ~~ 0*i #covariance of slope and intercept
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model3.fit = growth(model3, data = master)
fitmeasures(model3.fit, fit.measures = order)
summary(model3.fit)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = master)
fitmeasures(model4.fit, fit.measures = order)
summary(model4.fit)
{model5 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
'}
model5.fit = growth(model5, sample.cov = heart.cov, sample.mean = heart.mean, sample.nobs = 200)
model5.fit = growth(model5, data = master)
fitmeasures(model5.fit, fit.measures = order)
summary(model5.fit)
summary(model1.fit)
#latent means
loadings = parameterestimates(multisteps2$fit.residuals)
#latent means
loadings = parameterestimates(multisteps$fit.residuals)
loadings
{overallmodel = '
excite =~ q1 + q2 + q5 + q8 + q9 + q11 + q12 + q16 + q19
purp =~ q3 + q4 + q6 + q7 + q10 + q13 + q17 + q18 + q20
'}
overallmodel.fit = cfa(overallmodel,
data = nomiss,
meanstructure = T)
summary(overallmodel.fit, rsquare = T, standardized = T, fit.measures = T)
random = subset(nomiss, group == "Random Random")
notrandom = subset(nomiss, group == "Random Not")
overallmodel.fit.r = cfa(overallmodel,
data = random,
meanstructure = T)
summary(overallmodel.fit.r, rsquare = T, standardized = T, fit.measures = T)
overallmodel.fit.n = cfa(overallmodel,
data = notrandom,
meanstructure = T)
summary(overallmodel.fit.n, rsquare = T, standardized = T, fit.measures = T)
{overallmodel = '
excite =~ q1 + q2 + q5 + q8 + q9 + q11 + q12 + q16 + q19
purp =~ q3 + q4 + q6 + q7 + q10 + q13 + q17 + q18 + q20
'}
overallmodel.fit = cfa(overallmodel,
data = nomiss,
meanstructure = T)
summary(overallmodel.fit, rsquare = T, standardized = T, fit.measures = T)
master = read.csv("assign 4 mgcfa.csv")
master = read.csv("assign 4 mgcfa.csv")
summary(master)
master = master[, c(1:14, 17:24)]
master[, c(3, 6, 8, 11, 16:18)] =
abs(master[, c(3, 6, 8, 11, 16:18)]-8)
library(mice)
percentmiss = function(x){ sum(is.na(x))/length(x) *100 }
apply(master, 2, percentmiss)
missing = apply(master, 1, percentmiss)
table(missing)
replacepeople = master[ missing < 5 , ]
dontpeople = master[ missing >= 5 , ]
replacecolumn = replacepeople[ , -c(1)]
group = replacepeople[ , 1]
tempnomiss = mice(replacecolumn)
tempnomiss = mice(replacecolumn)
nomiss = complete(tempnomiss, 1)
nomiss = cbind(group, nomiss)
{overallmodel = '
excite =~ q1 + q2 + q5 + q8 + q9 + q11 + q12 + q16 + q19
purp =~ q3 + q4 + q6 + q7 + q10 + q13 + q17 + q18 + q20
'}
overallmodel.fit = cfa(overallmodel,
data = nomiss,
meanstructure = T)
summary(overallmodel.fit, rsquare = T, standardized = T, fit.measures = T)
random = subset(nomiss, group == "Random Random")
notrandom = subset(nomiss, group == "Random Not")
overallmodel.fit.r = cfa(overallmodel,
data = random,
meanstructure = T)
summary(overallmodel.fit.r, rsquare = T, standardized = T, fit.measures = T)
overallmodel.fit.n = cfa(overallmodel,
data = notrandom,
meanstructure = T)
summary(overallmodel.fit.n, rsquare = T, standardized = T, fit.measures = T)
#measurement invariance
options(scipen = 999)
multisteps = measurementInvariance(overallmodel,
data = nomiss,
group = "group",
strict = T)
fitMeasures(multisteps$fit.configural)
fitMeasures(multisteps$fit.loadings)
fitMeasures(multisteps$fit.intercepts)
fitMeasures(multisteps$fit.residuals)
#latent means
loadings = parameterestimates(multisteps$fit.residuals)
randomload = subset(loadings, group == "1" & op == "=~", select = "est")
notrandomload = subset(loadings, group == "2" & op == "=~", select = "est")
parameterestimates(multisteps$fit.residuals)
summary(multisteps)
summary(multisteps$fit.residuals)
#latent means
loadings = parameterestimates(multisteps$fit.residuals)
multisteps$strict
parameterestimates(multisteps$strict)
parameterestimates(multisteps$strict)
#latent means
loadings = parameterestimates(multisteps$fit.residuals)
randomload = subset(loadings, group == "1" & op == "=~", select = "est")
notrandomload = subset(loadings, group == "2" & op == "=~", select = "est")
View(loadings)
View(notrandom)
View(nomiss)
nomiss2 = nomiss[,c(1:3, 6, 9:13 ,17, 20, 4, 5, 8, 11, 14, 18, 19, 21)]
View(nomiss2)
nomiss2 = nomiss[,c(1:3, 6, 9, 10, 12, 13, 17, 20, 4, 5, 7, 8, 11, 14, 18, 19, 21)]
nomiss2 = nomiss[,c(1:3, 6, 9, 10, 12, 13, 16, 19, 4, 5, 7, 8, 11, 14, 17, 18, 21)]
nomiss2 = nomiss[,c(1:3, 6, 9, 10, 12, 13, 16, 19, 4, 5, 7, 8, 11, 14, 17, 18, 21)]
nomiss2 = nomiss[,c(1:3, 6, 9, 10, 12, 13, 15, 20, 4, 5, 7, 8, 11, 14, 17, 18, 21)]
nomiss2 = nomiss[,c(1:3, 6, 9, 10, 12, 13, 15, 18, 4, 5, 7, 8, 11, 14, 17, 18, 21)]
nomiss2 = nomiss[,c(1:3, 6, 9, 10, 12, 13, 15, 18, 4, 5, 7, 8, 11, 14, 16, 17, 19)]
nomiss2 = nomiss[,c(1:3, 6, 9, 10, 12, 13, 15, 18, 4, 5, 7, 8, 11, 14, 16, 17, 19:22)]
{overallmodel = '
excite =~ q1 + q2 + q5 + q8 + q9 + q11 + q12 + q16 + q19
purp =~ q3 + q4 + q6 + q7 + q10 + q13 + q17 + q18 + q20
'}
overallmodel.fit = cfa(overallmodel,
data = nomiss2,
meanstructure = T)
summary(overallmodel.fit, rsquare = T, standardized = T, fit.measures = T)
random = subset(nomiss2, group == "Random Random")
notrandom = subset(nomiss2, group == "Random Not")
overallmodel.fit.r = cfa(overallmodel,
data = random,
meanstructure = T)
summary(overallmodel.fit.r, rsquare = T, standardized = T, fit.measures = T)
overallmodel.fit.n = cfa(overallmodel,
data = notrandom,
meanstructure = T)
summary(overallmodel.fit.n, rsquare = T, standardized = T, fit.measures = T)
#measurement invariance
options(scipen = 999)
multisteps = measurementInvariance(overallmodel,
data = nomiss,
group = "group",
strict = T)
tableprint[1, ] = c("All Groups", 1412.326, 134,  .079, .045, .901, "n/a", "n/a")
tableprint = matrix(NA, nrow = 7, ncol = 8)
colnames(tableprint) = c("Model", "Chi-Square", "df",
"RMSEA", "SRMR", "CFI", "Change CFI", "Different?")
tableprint[1, ] = c("All Groups", 1412.326, 134,  .079, .045, .901, "n/a", "n/a")
tableprint[2, ] = c("Random", 848.709, 134, .082, .049, .889, "n/a", "n/a")
tableprint[3, ] = c("Not Random", 6745.277, 153, .082, .048, .898, "n/a", "n/a")
tableprint[4, ] = c("Configural Invariance", 1651.951, 268, .084, .048, .894, "n/a", "n/a")
tableprint[5, ] = c("Metric Invariance", 1691.888, 284, .083, .055, .892, .002, "No")
tableprint[6, ] = c("Scalar Invariance", 1719.777, 300, .081, .055, .891, .001, "No")
tableprint[7, ] = c("Strict Invariance", 1775.771, 318, .080, .056, .888, .003, "No")
kable(tableprint)
#latent means
loadings = parameterestimates(multisteps$fit.residuals)
randomload = subset(loadings, group == "1" & op == "=~", select = "est")
notrandomload = subset(loadings, group == "2" & op == "=~", select = "est")
randommult = apply(random[ , 2:19ncol(random)], 1, function(x) { x * randomload })
randommult = apply(random[ , 2:19(random)], 1, function(x) { x * randomload })
View(random)
randommult = apply(random[ , 2:19], 1, function(x) { x * randomload })
notrandommult = apply(notrandom[ , 2:19], 1, function(x) { x * notrandomload })
View(random)
View(notrandom)
randommult = apply(random[ , 2:19], 1, function(x) { x * randomload })
notrandommult = apply(notrandom[ , 2:19], 1, function(x) { x * notrandomload })
randommult = as.data.frame(randommult)
randommult = t(randommult) #flip it so it's people per row
notrandommult = as.data.frame(notrandommult)
notrandommult = t(notrandommult)
ranlatent = rowMeans(randommult)
notranlatent = rowMeans(notrandommult)
View(randommult)
View(randommult)
View(randommult)
ranlatentE = rowMeans(randommult[ , 1:9])
nonlatentE = rowMeans(nonrandommult[ , 1:9])
notrandommult = as.data.frame(notrandommult)
notrandommult = t(notrandommult)
nonlatentE = rowMeans(nonrandommult[ , 1:9])
notrandommult = apply(notrandom[ , 2:19], 1, function(x) { x * notrandomload })
notrandommult = as.data.frame(notrandommult)
notrandommult = t(notrandommult)
nonlatentE = rowMeans(nonrandommult[ , 1:9])
nonlatentE = rowMeans(notrandommult[ , 1:9])
ranlatentP = rowMeans(randommult[ , 10:18])
nonlatentP = rowMeans(notrandommult[ , 10:18])
sd(ranlatentE)
sd(nonlatentE)
sd(menlatentP)
sd(ranlatentP)
sd(nonlatentP)
t.test(ranlatent, notranlatent,
alternative = "two.sided",
paired = FALSE,
var.equal = TRUE,
na.action = TRUE)
cohen.d(ranlatent, notranlatent)
#intercept only model (intercept average)
{model1 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 0*i
total1 ~~ r*total1
total1 ~~ r*total2
total3 ~~ r*total3
'}
#intercept only model (intercept average)
{model1 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 0*i
total1 ~~ r*total1
total1 ~~ r*total2
total3 ~~ r*total3
'}
order = c("df", "chisq", "rmsea", "srmr", "cfi")
model1.fit = growth(model1, data = master)
fitmeasures(model1.fit, fit.measures = order)
model1.fit = growth(model1, data = nomiss2)
fitmeasures(model1.fit, fit.measures = order)
{model2 = '
i =~ 1*total1 + 1*total2 + 1*total3
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model2.fit = growth(model2, data = nomiss2)
fitmeasures(model2.fit, fit.measures = order)
{model3 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
s ~ 0*1 #average slope across time points
s ~~ 0*i #covariance of slope and intercept
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model3.fit = growth(model3, data = master)
model3.fit = growth(model3, data = nomiss2)
fitmeasures(model3.fit, fit.measures = order)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
fitmeasures(model4.fit, fit.measures = order)
summary(model4.fit)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 1*i
s =~ 0*total1 + 1*total2 + 2*total3
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
summary(model4.fit)
model4.fit = growth(model4, data = nomiss2)
fitmeasures(model4.fit, fit.measures = order)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 1
s =~ 0*total1 + 1*total2 + 2*total3
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ i*1
s =~ 0*total1 + 1*total2 + 2*total3
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 1*i
s =~ 0*total1 + 1*total2 + 2*total3
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
fitmeasures(model4.fit, fit.measures = order)
summary(model4.fit)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 1*i
s =~ 0*total1 + 1*total2 + 2*total3
s ~~ 1*s
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
inspect(fit, "cov.lv")
inspect(model4.fit, "cov.lv")
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
i ~~ 1*i
s =~ 0*total1 + 1*total2 + 2*total3
s ~~ 1*s
i ~~ s
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
i ~~ s
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
i =~ s
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
i =~ 1*i
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
i ~~ 1*i
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
i ~~ 1*i
s ~~ 1*s
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
{model4 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
i ~~ 1*i
s ~~ 1*s
i =~ s
total1 ~~ r*total1
total2 ~~ r*total2
total3 ~~ r*total3
'}
model4.fit = growth(model4, data = nomiss2)
fitmeasures(model4.fit, fit.measures = order)
{model5 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
'}
model5.fit = growth(model5, data = master)
summary(model5.fit)
{model5 = '
i =~ 1*total1 + 1*total2 + 1*total3
s =~ 0*total1 + 1*total2 + 2*total3
s ~~ 1*s
'}
model5.fit = growth(model5, data = master)
fitmeasures(model5.fit, fit.measures = order)
setwd("~/GitHub/MOTE/data")
setwd("~/GitHub/MOTE")
##run this thing
library(roxygen2)
roxygen2::roxygenise()
##set up for github
install.packages("roxygen2")
install.packages("roxygen2")
setwd("~/GitHub/MOTE")
##run this thing
library(roxygen2)
roxygen2::roxygenise()
setwd("~/GitHub/MOTE")
##run this thing
library(roxygen2)
roxygen2::roxygenise()
install.packages("MBESS")
install.packages("installr"); library(installr)
updateR()
##run this thing
library(roxygen2)
install.packages("roxygen2")
##then run this to update
devtools::install_github("doomlab/MOTE")
install.packages("devtools")
##run this thing
library(roxygen2)
setwd("~/GitHub/MOTE")
roxygen2::roxygenise()
install.packages("MBESS")
##run this thing
library(roxygen2)
roxygen2::roxygenise()
##then run this to update
devtools::install_github("doomlab/MOTE")
roxygen2::roxygenise()
##then run this to update
devtools::install_github("doomlab/MOTE")
