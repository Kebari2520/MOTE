#
# Returns:
#   List of ges, F, and sample size statistics
ges <- ssm / (ssm + sss + sse1 + sse2 + sse3)
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#glow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ghigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = ges, = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("ges" = ges, #ges stats
"geslow" = limits$Lower.Conf.Limit.R2,
"geshigh" = limits$upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
ges.partial.SS.rm <- function (dfm, dfe, ssm, sss, sse1, sse2, sse3, Fvalue, a = .05) {
# This function displays ges squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom for the model/IV/between
#   dfe     : degrees of freedom for the error/residual/within
#   ssm     : sum of squares for the model/IV/between
#   sss     : sum of squares subject variance
#   sse1    : sum of squares for the error/residual/within for the first IV
#   sse2    : sum of squares for the error/residual/within for the second IV
#   sse3    : sum of squares for the error/residual/within for the interaction
#   Fvalue  : F statistic
#   a       : significance level
#
# Returns:
#   List of ges, F, and sample size statistics
ges <- ssm / (ssm + sss + sse1 + sse2 + sse3)
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#glow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ghigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = ges, = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("ges" = ges, #ges stats
"geslow" = limits$Lower.Conf.Limit.R2,
"geshigh" = limits$upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
omega.F <- function (dfm, dfe, Fvalue, n, a = .05) {
# This function displays omega squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom model/IV/between
#   dfe     : degrees of freedom error/residual/within
#   Fvalue  : F statistic
#   n       : full sample size
#   a       : significance level
#
# Returns:
#   List of omega, F, and sample size statistics
omega <- (dfm * (Fvalue-1)) / ((dfm * (Fvalue-1)) + n)
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#olow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ohigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = omega, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("omega" = omega, #omega stats
"omegalow" = limits$Lower.Conf.Limit.R2,
"omegahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
omega.F(1,100,5,100)
omega.full.SS <- function (dfm, dfe, msm, mse, sst, a = .05) {
# This function displays omega squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom for the model/IV/between
#   dfe     : degrees of freedom error/residual/within
#   msm     : mean square for the model/IV/between
#   mse     : mean square for the error/residual/within
#   sst     : sum of squares total
#   a       : significance level
#
# Returns:
#   List of omega, F, and sample size statistics
omega <- (dfm * (msm - mse)) / (sst + mse)
Fvalue <- msm / mse
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#olow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ohigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = omega, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("omega" = omega, #omega stats
"omegalow" = limits$Lower.Conf.Limit.R2,
"omegahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
omega.full.SS(1,100,4,2,45)
##set your working directory to package file
setwd("~/OneDrive - Missouri State University/RESEARCH/2 projects/MOTE")
##run this thing
library(roxygen2)
roxygen2::roxygenise()
r.correl <- function (r, n, a = .05) {
# This function Displays transformation from r to r2 to calculate
# the non-central confidence interval for r2.
#
# Args:
#   r : correlation coefficient
#   n : sample size
#   a : significance level
#
# Returns:
#   List of r, r2, and sample size statistics
library(MBESS)
rsq <- (r) ^ 2
se <- sqrt(4 * rsq * ((1 - rsq) ^ 2) * ((n - 3) ^ 2) / ((n ^ 2 - 1) * (3 + n)))
t <- r / sqrt((1 - rsq) / (n - 2))
Fvalue <- t ^ 2
dfm <- 1
dfe <- n - 2
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#rsqlow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#rsqhigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = rsq, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
ciforr <- ci.R(R = abs(r), df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
#deal with negative r / d values
if (r < 0) {
rlow = 0 - ciforr$Lower.Conf.Limit.R
rhigh = 0 - ciforr$Upper.Conf.Limit.R
} else {
rlow = ciforr$Lower.Conf.Limit.R
rhigh = ciforr$Upper.Conf.Limit.R
}
output = list("r" = r, #r stats
"rlow" = rlow,
"rhigh" = rhigh,
"R2" = rsq, #R squared stats
"R2low" = limits$Lower.Conf.Limit.R2,
"R2high" = limits$Upper.Conf.Limit.R2,
"se" = se,
"n" = n, #sample stats
"dfm" = 1, #sig stats
"dfe" = (n - 2),
"t" = t,
"F" = Fvalue,
"p" = p)
return(output)
}
omega.partial.SS.rm <- function (dfm, dfe, msm, mse, mss, ssm, sse, sss, a = .05) {
# This function displays omega squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom for the model/IV/between
#   dfe     : degrees of freedom for the error/residual/within
#   msm     : mean square for the model/IV/between
#   mse     : mean square for the error/residual/within
#   mss     : mean square for the subject variance
#   ssm     : sum of squares for the model/IV/between
#   sse     : sum of squares for the error/residual/within
#   sss     : sum of squares for the subject variance
#   a       : significance level
#
# Returns:
#   List of omega, F, and sample size statistics
omega <- (dfm * (msm - mse)) / (ssm + sse + sss + mss)
Fvalue <- msm / mse
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#olow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ohigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = omega, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("omega" = omega, #omega stats
"omegalow" = limits$Lower.Conf.Limit.R2,
"omegahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
omega.partial.SS.bn <- function (dfm, dfe, msm, mse, ssm, n, a = .05) {
# This function displays omega squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom for the model/IV/between
#   dfe     : degrees of freedom error/residual/within
#   msm     : mean square for the model/IV/between
#   mse     : mean square for the error/residual/within
#   ssm     : sum of squares for the model/IV/between
#   n       : total sample size
#   a       : significance level
#
# Returns:
#   List of omega, F, and sample size statistics
omega <- (dfm * (msm - mse)) / (ssm + (n-dfm)*mse)
Fvalue <- msm / mse
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#olow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ohigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = omega, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("omega" = omega, #omega stats
"omegalow" = limits$Lower.Conf.Limit.R2,
"omegahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
omega.full.SS <- function (dfm, dfe, msm, mse, sst, a = .05) {
# This function displays omega squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom for the model/IV/between
#   dfe     : degrees of freedom error/residual/within
#   msm     : mean square for the model/IV/between
#   mse     : mean square for the error/residual/within
#   sst     : sum of squares total
#   a       : significance level
#
# Returns:
#   List of omega, F, and sample size statistics
omega <- (dfm * (msm - mse)) / (sst + mse)
Fvalue <- msm / mse
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#olow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ohigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = omega, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("omega" = omega, #omega stats
"omegalow" = limits$Lower.Conf.Limit.R2,
"omegahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
omega.F <- function (dfm, dfe, Fvalue, n, a = .05) {
# This function displays omega squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom model/IV/between
#   dfe     : degrees of freedom error/residual/within
#   Fvalue  : F statistic
#   n       : full sample size
#   a       : significance level
#
# Returns:
#   List of omega, F, and sample size statistics
omega <- (dfm * (Fvalue-1)) / ((dfm * (Fvalue-1)) + n)
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#olow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ohigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = omega, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("omega" = omega, #omega stats
"omegalow" = limits$Lower.Conf.Limit.R2,
"omegahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
odds <- function (n11, n12, n21, n22, a = .05) {
# Displays odds ratios, sensitivity / specificity
#
# Args:
#   n11 : sample size for level 1.1
#   n12 : sample size for level 1.2
#   n21 : sample size for level 2.1
#   n22 : sample size for level 2.2
#   a   : significance level
#
# Returns:
#   List of odds and sample size statistics
odds <- (n11 / n12) / (n21 / n22)
se <- sqrt((1 / n11) + (1 / n12) + (1 / n21) + (1 / n22))
olow <- exp(log(odds)) - qnorm(a / 2, lower.tail = F) * se
ohigh <- exp(log(odds)) + qnorm(a / 2, lower.tail = F) * se
output = list("odds" = odds, #odds stats
"olow" = olow,
"ohigh" = ohigh,
"se" = se)
return(output)
}
ges.partial.SS.rm <- function (dfm, dfe, ssm, sss, sse1, sse2, sse3, Fvalue, a = .05) {
# This function displays ges squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom for the model/IV/between
#   dfe     : degrees of freedom for the error/residual/within
#   ssm     : sum of squares for the model/IV/between
#   sss     : sum of squares subject variance
#   sse1    : sum of squares for the error/residual/within for the first IV
#   sse2    : sum of squares for the error/residual/within for the second IV
#   sse3    : sum of squares for the error/residual/within for the interaction
#   Fvalue  : F statistic
#   a       : significance level
#
# Returns:
#   List of ges, F, and sample size statistics
ges <- ssm / (ssm + sss + sse1 + sse2 + sse3)
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#glow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ghigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = ges, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("ges" = ges, #ges stats
"geslow" = limits$Lower.Conf.Limit.R2,
"geshigh" = limits$upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
ges.partial.SS.mix <- function (dfm, dfe, ssm, sss, sse, Fvalue, a = .05) {
# This function displays ges squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom for the model/IV/between
#   dfe     : degrees of freedom for the error/residual/within
#   ssm     : sum of squares for the model/IV/between
#   sss     : sum of squares subject variance
#   sse     : sum of squares for the error/residual/within
#   Fvalue  : F statistic
#   a       : significance level
#
# Returns:
#   List of ges, F, and sample size statistics
ges <- ssm / (ssm + sss+ sse)
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#glow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ghigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = ges, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("ges" = ges, #ges stats
"geslow" = limits$Lower.Conf.Limit.R2,
"geshigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
eta.partial.SS <- function (dfm, dfe, ssm, sse, Fvalue, a = .05) {
# This function displays eta squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     :  degrees of freedom for the model/IV/between
#   dfe     :  degrees of freedom for the error/residual/within
#   ssm     :  sum of squares for the model/IV/between
#   sse     :  sum of squares for the error/residual/within
#   Fvalue  :  F statistic
#   a       :  significance level
#
# Returns:
#   List of eta, F, and sample size statistics
eta <- ssm / (ssm + sse)
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#elow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ehigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = eta, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("eta" = eta, #eta stats
"etalow" = limits$Lower.Conf.Limit.R2,
"etahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
eta.full.SS <- function (dfm, dfe, ssm, sst, Fvalue, a = .05) {
# This function displays eta squared from ANOVA analyses
# and its non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     :  degrees of freedom for the model/IV/between
#   dfe     :  degrees of freedom for the error/residual/within
#   ssm     :  sum of squares for the model/IV/between
#   sst     :  sum of squares total
#   Fvalue  :  F statistic
#   a       :  significance level
#
# Returns:
#   List of eta, F, and sample size statistics
eta <- ssm / sst
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#elow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ehigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = eta, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("eta" = eta, #eta stats
"etalow" = limits$Lower.Conf.Limit.R2,
"etahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
eta.F <- function (dfm, dfe, Fvalue, a = .05) {
# This function displays eta, r squared, ICCs from ANOVA analyses
# and their non-central confidence interval based on the F distribution.
#
# Args:
#   dfm     : degrees of freedom model/IV/between
#   dfe     : degrees of freedom error/residual/within
#   Fvalue  : F statistic
#   a       : significance level
#
# Returns:
#   List of eta, F, and sample size statistics
eta <- (dfm * Fvalue) / (dfm * Fvalue + dfe)
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#elow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#ehigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = eta, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
output <- list("eta" = eta, #eta stats
"etalow" = limits$Lower.Conf.Limit.R2,
"etahigh" = limits$Upper.Conf.Limit.R2,
"dfm" = dfm, #sig stats
"dfe" = dfe,
"F" = Fvalue,
"p" = p)
return(output)
}
d.to.r <- function (d, n1, n2, a = .05) {
# This function Displays transformation from r to r2 to calculate
# the non-central confidence interval for r2.
#
# Args:
#   d   : effect size statistic
#   n1  : sample size group one
#   n2  : sample size group two
#   a   : significance level
#
# Returns:
#   List of r, r2, and sample size statistics
library(MBESS)
correct = (n1 + n2)^2 / (n1*n2)
n = n1 + n2
r <- d / sqrt(d^2 + correct)
rsq <- (r) ^ 2
se <- sqrt(4 * rsq * ((1 - rsq) ^ 2) * ((n - 3) ^ 2) / ((n ^ 2 - 1) * (3 + n)))
t <- r / sqrt((1 - rsq) / (n - 2))
Fvalue <- t ^ 2
dfm <- 1
dfe <- n - 2
#ncpboth <- conf.limits.ncf(Fvalue, df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
#rsqlow <- ncpboth$Lower.Limit / (ncpboth$Lower.Limit + dfm + dfe + 1)
#rsqhigh <- ncpboth$Upper.Limit / (ncpboth$Upper.Limit + dfm + dfe + 1)
limits <- ci.R2(R2 = rsq, df.1 = dfm, df.2 = dfe, conf.level = (1-a))
ciforr <- ci.R(R = abs(r), df.1 = dfm, df.2 = dfe, conf.level = (1 - a))
p <- pf(Fvalue, dfm, dfe, lower.tail = F)
#deal with negative r / d values
if (r < 0) {
rlow = 0 - ciforr$Lower.Conf.Limit.R
rhigh = 0 - ciforr$Upper.Conf.Limit.R
} else {
rlow = ciforr$Lower.Conf.Limit.R
rhigh = ciforr$Upper.Conf.Limit.R
}
output = list("r" = r, #r stats
"rlow" = rlow,
"rhigh" = rhigh,
"R2" = rsq, #R squared stats
"R2low" = limits$Lower.Conf.Limit.R2,
"R2high" = limits$Upper.Conf.Limit.R2,
"se" = se,
"n" = n, #sample stats
"dfm" = 1, #sig stats
"dfe" = (n - 2),
"t" = t,
"F" = Fvalue,
"p" = p)
return(output)
}
##set your working directory to package file
setwd("~/OneDrive - Missouri State University/RESEARCH/2 projects/MOTE")
##run this thing
library(roxygen2)
roxygen2::roxygenise()
##then run this to update
devtools::install_github("doomlab/MOTE")
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/MOTE')
