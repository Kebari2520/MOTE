runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
library(DT)
?DT
??DT
??DTOutput
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
install.packages("DT")
install.packages("DT")
shiny::runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
shiny::runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
shiny::runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lab/single_words')
library(lavaan)
data(HolzingerSwineford1939)
visual.model = 'visual =~ x1 + x2 + x3'
visual.fit = cfa(model = visual.model, data = HolzingerSwineford1939)
summary(visual.fit)
visual.model = 'visual =~ x1 + x2 + x3 + x4'
visual.fit = cfa(model = visual.model, data = HolzingerSwineford1939)
summary(visual.fit)
visual.model = 'visual =~ x4 + x5 + x6'
visual.fit = cfa(model = visual.model, data = HolzingerSwineford1939)
summary(visual.fit)
summary(visual.fit, standardized = T)
summary(visual.fit, standardized = T)
summary(visual.fit, standardized = T, fit.measures = TRUE)
visual.model = 'visual =~ x1 + x2 + x3 + x7+x8+x9'
visual.fit = cfa(model = visual.model, data = HolzingerSwineford1939)
summary(visual.fit, standardized = T, fit.measures = TRUE)
summary(visual.fit, standardized = T, fit.measures = TRUE)
library(lavaan)
help(PoliticalDemocracy)
data(lavaan)
library(lavaan)
text.model <- 'textspeed =~ x4 + x5 + x6 + x7 + x8 + x9'
cfa(text.model, data = HolzingerSwineford1939)
library(lavaan)
data(HolzingerSwineford1939)
text.model <- 'textspeed =~ x4 + x5 + x6 + x7 + x8 + x9'
text.fit <- cfa(model = text.model, data = HolzingerSwineford1939)
summary(text.fit)
lab_table <- read.csv("~/OneDrive - Missouri State University/RESEARCH/2 projects/Table of Doom/website update/lab_table.csv", comment.char="#")
View(lab_table)
ncol(lab_table)
names(lab_table)
library(lavaan)
data(PoliticalDemocracy)
politics.model <- 'poldemo60 =~ y1 + y2 + y3 + y4'
politics.fit <- cfa(model = politics.model, data = PoliticalDemocracy)
summary(politics.fit)
library(lavaan)
data(PoliticalDemocracy)
politics.model <- 'poldemo60 =~ y1 + y2 + y3 + y4'
politics.fit <- cfa(model = politics.model, data = PoliticalDemocracy)
summary(politics.fit)
library(lavaan)
data(HolzingerSwineford1939)
text.model <- 'textspeed =~ x4 + x5 + x6 + x7 + x8 + x9'
text.fit <- cfa(model = text.model, data = HolzingerSwineford1939)
summary(text.fit, standardized = TRUE)
library(lavaan)
data(HolzingerSwineford1939)
text.model <- 'textspeed =~ x4 + x5 + x6 + x7 + x8 + x9'
text.fit <- cfa(model = text.model, data = HolzingerSwineford1939)
summary(text.fit, fit.measures = TRUE)
library(lavaan)
data(PoliticalDemocracy)
politics.model <- 'poldemo60 =~ y1 + y2 + y3 + y4'
politics.fit <- cfa(model = politics.model, data = PoliticalDemocracy)
summary(politics.fit, standardized = TRUE, fit.measures = TRUE)
install.packages(c("ade4", "afex", "backports", "BatchExperiments", "BatchJobs", "BDgraph", "BH", "bookdown", "broom", "callr", "car", "checkmate", "coin", "cowplot", "curl", "data.table", "dbplyr", "DescTools", "devtools", "DT", "dunn.test", "ellipse", "epitools", "estimability", "FactoMineR", "foreach", "FSA", "git2r", "glue", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "jmv", "jmvcore", "kableExtra", "knitr", "lhs", "lme4", "lmerTest", "lsmeans", "lubridate", "MASS", "matrixStats", "MBESS", "memisc", "meta", "mgcv", "mice", "mirt", "mixOmics", "mokken", "msm", "multcomp", "MuMIn", "mvtnorm", "OpenMx", "openssl", "pbapply", "plotrix", "PMCMR", "powerMediation", "quantmod", "quantreg", "rcompanion", "RcppArmadillo", "RcppEigen", "RCurl", "registry", "reprex", "rgl", "rockchalk", "rpart", "rpf", "rprojroot", "RVAideMemoire", "slam", "spatstat", "spatstat.data", "spatstat.utils", "StanHeaders", "stringi", "survey", "tidyr", "tidyselect", "timeDate", "tm", "TOSTER", "tseries", "TTR", "vcd", "vegan", "xaringan", "xml2", "xts", "yaml", "zoo"))
install.packages(c("ade4", "afex", "backports", "BatchExperiments", "BatchJobs", "BDgraph", "BH", "bookdown", "broom", "callr", "car", "checkmate", "coin", "cowplot", "curl", "data.table", "dbplyr", "DescTools", "devtools", "DT", "dunn.test", "ellipse", "epitools", "estimability", "FactoMineR", "foreach", "FSA", "git2r", "glue", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "jmv", "jmvcore", "kableExtra", "knitr", "lhs", "lme4", "lmerTest", "lsmeans", "lubridate", "MASS", "matrixStats", "MBESS", "memisc", "meta", "mgcv", "mice", "mirt", "mixOmics", "mokken", "msm", "multcomp", "MuMIn", "mvtnorm", "OpenMx", "openssl", "pbapply", "plotrix", "PMCMR", "powerMediation", "quantmod", "quantreg", "rcompanion", "RcppArmadillo", "RcppEigen", "RCurl", "registry", "reprex", "rgl", "rockchalk", "rpart", "rpf", "rprojroot", "RVAideMemoire", "slam", "spatstat", "spatstat.data", "spatstat.utils", "StanHeaders", "stringi", "survey", "tidyr", "tidyselect", "timeDate", "tm", "TOSTER", "tseries", "TTR", "vcd", "vegan", "xaringan", "xml2", "xts", "yaml", "zoo"))
install.packages(c("ade4", "afex", "backports", "BatchExperiments", "BatchJobs", "BDgraph", "BH", "bookdown", "broom", "callr", "car", "checkmate", "coin", "cowplot", "curl", "data.table", "dbplyr", "DescTools", "devtools", "DT", "dunn.test", "ellipse", "epitools", "estimability", "FactoMineR", "foreach", "FSA", "git2r", "glue", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "jmv", "jmvcore", "kableExtra", "knitr", "lhs", "lme4", "lmerTest", "lsmeans", "lubridate", "MASS", "matrixStats", "MBESS", "memisc", "meta", "mgcv", "mice", "mirt", "mixOmics", "mokken", "msm", "multcomp", "MuMIn", "mvtnorm", "OpenMx", "openssl", "pbapply", "plotrix", "PMCMR", "powerMediation", "quantmod", "quantreg", "rcompanion", "RcppArmadillo", "RcppEigen", "RCurl", "registry", "reprex", "rgl", "rockchalk", "rpart", "rpf", "rprojroot", "RVAideMemoire", "slam", "spatstat", "spatstat.data", "spatstat.utils", "StanHeaders", "stringi", "survey", "tidyr", "tidyselect", "timeDate", "tm", "TOSTER", "tseries", "TTR", "vcd", "vegan", "xaringan", "xml2", "xts", "yaml", "zoo"))
install.packages(c("ade4", "afex", "backports", "BatchExperiments", "BatchJobs", "BDgraph", "BH", "bookdown", "broom", "callr", "car", "checkmate", "coin", "cowplot", "curl", "data.table", "dbplyr", "DescTools", "devtools", "DT", "dunn.test", "ellipse", "epitools", "estimability", "FactoMineR", "foreach", "FSA", "git2r", "glue", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "jmv", "jmvcore", "kableExtra", "knitr", "lhs", "lme4", "lmerTest", "lsmeans", "lubridate", "MASS", "matrixStats", "MBESS", "memisc", "meta", "mgcv", "mice", "mirt", "mixOmics", "mokken", "msm", "multcomp", "MuMIn", "mvtnorm", "OpenMx", "openssl", "pbapply", "plotrix", "PMCMR", "powerMediation", "quantmod", "quantreg", "rcompanion", "RcppArmadillo", "RcppEigen", "RCurl", "registry", "reprex", "rgl", "rockchalk", "rpart", "rpf", "rprojroot", "RVAideMemoire", "slam", "spatstat", "spatstat.data", "spatstat.utils", "StanHeaders", "stringi", "survey", "tidyr", "tidyselect", "timeDate", "tm", "TOSTER", "tseries", "TTR", "vcd", "vegan", "xaringan", "xml2", "xts", "yaml", "zoo"))
install.packages(c("ade4", "afex"))
install.packages(c("backports", "BatchExperiments"))
install.packages(c("BDgraph", "BH", "bookdown", "broom"))
install.packages(c("callr", "car", "coin", "cowplot", "curl", "data.table", "dbplyr", "DescTools", "devtools", "DT", "dunn.test", "ellipse", "epitools", "estimability", "FactoMineR", "foreach", "FSA", "git2r", "glue", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmlwidgets", "irlba", "iterators", "jmv", "jmvcore", "kableExtra", "knitr", "lhs", "lme4", "lmerTest", "lsmeans", "lubridate", "MASS", "matrixStats", "MBESS", "memisc", "meta", "mgcv", "mice", "mirt", "mixOmics", "mokken", "msm", "multcomp", "MuMIn", "mvtnorm", "OpenMx", "openssl", "pbapply", "plotrix", "PMCMR", "powerMediation", "quantmod", "quantreg", "rcompanion", "RcppArmadillo", "RcppEigen", "RCurl", "registry", "reprex", "rgl", "rockchalk", "rpart", "rpf", "rprojroot", "RVAideMemoire", "slam", "spatstat", "spatstat.data", "spatstat.utils", "StanHeaders", "stringi", "survey", "tidyr", "tidyselect", "timeDate", "tm", "TOSTER", "tseries", "TTR", "vcd", "vegan", "xaringan", "xml2", "xts", "yaml", "zoo"))
shiny::runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/lq-screen')
ZMdscore = d.z.mean(5,4,4,4,10,.05)
library(MOTE)
library(MOTE)
ZMdscore = d.z.mean(5,4,4,4,10,.05)
ZMdscore
significant = "Your p-value is less than the alpha value, and therefore, this test would be considered statistically signifcant."
not_sig = "Your p-value is greater than the alpha value, and therefore, this test would be considered not statistically significant."
no_zero = "Your confidence interval does not include zero, and therefore, you might conclude that this effect size is different from zero."
yes_zero = "Your confidence interval does include zero, and therefore you might conclude that this effect size is similar to zero."
cohend = "This effect size is traditionally interpreted as the standardized difference between two mean scores."
eta = "This effect size is traditionally interpreted as the percent of variance accounted for in the DV by the IV(s)."
checkp = function(p, alpha) {
if (p <= alpha) { output = significant } else { output = not_sig }
return(output)}
checkzero = function(dlow, dhigh){
if (dlow <= 0 & dhigh >= 0) { output = yes_zero }
if (dlow >= 0 & dhigh <= 0) { output = yes_zero } else { output = no_zero }
return(output)}
checkp(ZMdscore$p, .05)
ZMdscore$p
checkzero(ZMdscore$dlow, ZMdscore$dhigh)
ZMdscore
checkzero = function(dlow, dhigh){
if (dlow <= 0 & dhigh >= 0) { output = yes_zero
} else if (dlow >= 0 & dhigh <= 0) { output = yes_zero
} else { output = no_zero }
return(output)}
checkzero(ZMdscore$dlow, ZMdscore$dhigh)
apa_d = function(savedd, alpha, digits = 2) {
paste("d = ", apa(saved$d, digits),
", ", (1-as.numeric(alpha))*100, "%[", apa(savedd$dlow, 2),
" - ", apa(savedd$dhigh, digits), "]", sep = "")
}
apa_d(ZMdscore, .05)
apa_d = function(saved.d, alpha, digits = 2) {
paste("d = ", apa(saved.d$d, digits),
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$dlow, 2),
" - ", apa(saved.d$dhigh, digits), "]", sep = "")
}
apa_d(ZMdscore, .05)
apa_d = function(saved.d, alpha, digits = 2) {
paste("d = ", apa(saved.d$d, digits),
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$dlow, 2),
", ", apa(saved.d$dhigh, digits), "]", sep = "")
}
apa_d(ZMdscore, .05)
upper
?upper
??upper
ZMdscore
pvalue = .00006
pvalue < paste(., rep(3,0), 1, sep = "")
pvalue < paste(".", rep(3,0), 1, sep = "")
paste(".", rep(3,0), 1, sep = "")
paste(".", rep(3,0), 1, sep = "")
rep(3,0)
paste(".", rep(0, 3), 1, sep = "")
paste(".", c(rep(0, 3)), 1, sep = "")
paste(c(".", rep(0, 3), 1), sep = "")
pvalue = ZMdscore$p
pvalue = apa(ZMdscore$p, 3, leading = F)
pvalue
if (pvalue < .001) {pvalue = "p < .001"} else { pvalue = paste("p = ", pvalue, sep = "") }
pvalue
saved.d$p = ZMdscore$p
apa_stat = function(saved.d, stat = "t", digits = 2) {
if (saved.d$p < .001) { pvalue = "p < .001"} else { pvalue = paste("p = ", apa(saved.d$p, 3, F), sep = "") }
if (stat == "Z") {
paste(stat, " = ", apa(saved.d$z, digits), ", ", pvalue, sep = "")
}
if (stat == "t") {}
if (stat == "F") {}
if (stat == "X") {}
}
apa_stat(ZMdscore, "Z", 2)
apa_stat = function(saved.d, stat = "t", digits = 2) {
if (saved.d$p < .001) { pvalue = "p < .001"} else { pvalue = paste("p = ", apa(saved.d$p, 3, F), sep = "") }
if (stat == "Z") {
output = paste(stat, " = ", apa(saved.d$z, digits), ", ", pvalue, sep = "")
}
if (stat == "t") {}
if (stat == "F") {}
if (stat == "X") {}
return(output)
}
apa_stat(ZMdscore, "Z")
eta.anova(2,548, 4.5)
v.chi.sq(3,100,2,2)
significant = "Your p-value is less than the alpha value, and therefore, this test would be considered statistically signifcant."
not_sig = "Your p-value is greater than the alpha value, and therefore, this test would be considered not statistically significant."
no_zero = "Your confidence interval does not include zero, and therefore, you might conclude that this effect size is different from zero."
yes_zero = "Your confidence interval does include zero, and therefore you might conclude that this effect size is similar to zero."
cohend = "This effect size is traditionally interpreted as the standardized difference between two mean scores."
eta = "This effect size is traditionally interpreted as the percent of variance accounted for in the DV by the IV(s)."
checkp = function(p, alpha) {
if (p <= alpha) { output = significant } else { output = not_sig }
return(output)}
checkzero = function(dlow, dhigh){
if (dlow <= 0 & dhigh >= 0) { output = yes_zero
} else if (dlow >= 0 & dhigh <= 0) { output = yes_zero
} else { output = no_zero }
return(output)}
apa_d = function(saved.d, alpha, digits = 2) {
paste("d = ", apa(saved.d$d, digits),
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$dlow, digits),
", ", apa(saved.d$dhigh, digits), "]", sep = "") }
apa_M = function(saved.d, meanno = 1, alpha, digits = 2) {
if (meanno == 1) {
paste("M = ", apa(saved.d$M1, digits), #report mean
", SD = ", apa(saved.d$sd1, digits), #report sd
", SE = ", apa(saved.d$se1, digits), #report se
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$M1low, 2), #report low
", ", apa(saved.d$M1high, digits), "]", sep = "") #report high
}
if (meanno == 2) {
paste("M = ", apa(saved.d$M2, digits), #report mean
", SD = ", apa(saved.d$sd2, digits), #report sd
", SE = ", apa(saved.d$se2, digits), #report se
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$M2low, 2), #report low
", ", apa(saved.d$M2high, digits), "]", sep = "") #report high
}
}
apa_stat = function(saved.d, stat = "t", digits = 2) {
if (saved.d$p < .001) { pvalue = "p < .001"} else { pvalue = paste("p = ", apa(saved.d$p, 3, F), sep = "") }
if (stat == "Z") {
output = paste(stat, " = ", apa(saved.d$z, digits), ", ", pvalue, sep = "")
}
if (stat == "t") {
output = paste(stat, "(", saved.d$df, ")",
" = ", apa(saved.d$t, digits), ", ", pvalue, sep = "")
}
if (stat == "F") {
output = paste(stat, "(", saved.d$dfm, ", ", saved.d$dfe, ")",
" = ", apa(saved.d$F, digits), ", ", pvalue, sep = "")
}
if (stat == "X2") {
output = paste(stat, "(", saved.d$df, ")",
" = ", apa(saved.d$x2, digits), ", ", pvalue, sep = "")
}
return(output)
}
apa_d(ZMdscore, input$alpha)
input = list()
input$alpha = ".05"
apa_d(ZMdscore, input$alpha)
v.chi.sq(x2, n, r, c, a = 0.05)
v.chi.sq(x2 = 4, n = 25, r = 2, c = 2, a = .05)
eta.anova(dfm = 2, dfe = 20, Fvalue = 5.7, a = .05)
checkzero(ZMdscore, "d")
ZMdscore
checkzero = function(saved.d, stat = "d"){
if (stat == "d") {
if (saved.d$dlow <= 0 & saved.d$dhigh >= 0) { output = yes_zero
} else if (saved.d$dlow >= 0 & saved.d$dhigh <= 0) { output = yes_zero
} else { output = no_zero }
return(output)
}
if (stat == "v") {
if (saved.d$vlow <= 0 & saved.d$vhigh >= 0) { output = yes_zero
} else if (saved.d$vlow >= 0 & saved.d$vhigh <= 0) { output = yes_zero
} else { output = no_zero }
return(output)
}
if (stat == "eta"){
if (saved.d$etalow <= 0 & saved.d$etahigh >= 0) { output = yes_zero
} else if (saved.d$etalow >= 0 & saved.d$etahigh <= 0) { output = yes_zero
} else { output = no_zero }
return(output)
}
}
checkzero(ZMdscore, "d")
checkzero = function(low, high){
if (low <= 0 & high >= 0) { output = yes_zero
} else if (low >= 0 & high <= 0) { output = yes_zero
} else { output = no_zero }
return(output)}
checkzero(ZMdscore$dlow, ZMdscore$dhigh)
apa_M(ZMdscore, 1, input$alpha)
apa_d = function(saved.d, alpha, digits = 2) {
output = paste("d = ", apa(saved.d$d, digits),
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$dlow, digits),
", ", apa(saved.d$dhigh, digits), "]", sep = "")
return(output)}
significant = "Your p-value is less than the alpha value, and therefore, this test would be considered statistically signifcant."
not_sig = "Your p-value is greater than the alpha value, and therefore, this test would be considered not statistically significant."
no_zero = "Your confidence interval does not include zero, and therefore, you might conclude that this effect size is different from zero."
yes_zero = "Your confidence interval does include zero, and therefore you might conclude that this effect size is similar to zero."
cohend = "This effect size is traditionally interpreted as the standardized difference between two mean scores."
eta = "This effect size is traditionally interpreted as the percent of variance accounted for in the DV by the IV(s)."
checkp = function(p, alpha) {
if (p <= alpha) { output = significant } else { output = not_sig }
return(output)}
checkzero = function(low, high){
if (low <= 0 & high >= 0) { output = yes_zero
} else if (low >= 0 & high <= 0) { output = yes_zero
} else { output = no_zero }
return(output)}
apa_d = function(saved.d, alpha, digits = 2) {
output = paste("d = ", apa(saved.d$d, digits),
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$dlow, digits),
", ", apa(saved.d$dhigh, digits), "]", sep = "")
return(output)}
apa_M = function(saved.d, meanno = 1, alpha, digits = 2) {
if (meanno == 1) {
output = paste("M = ", apa(saved.d$M1, digits), #report mean
", SD = ", apa(saved.d$sd1, digits), #report sd
", SE = ", apa(saved.d$se1, digits), #report se
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$M1low, 2), #report low
", ", apa(saved.d$M1high, digits), "]", sep = "") #report high
return(output)}
if (meanno == 2) {
output = paste("M = ", apa(saved.d$M2, digits), #report mean
", SD = ", apa(saved.d$sd2, digits), #report sd
", SE = ", apa(saved.d$se2, digits), #report se
", ", (1-as.numeric(alpha))*100, "%[", apa(saved.d$M2low, 2), #report low
", ", apa(saved.d$M2high, digits), "]", sep = "") #report high
return(output)}
}
apa_stat = function(saved.d, stat = "t", digits = 2) {
if (saved.d$p < .001) { pvalue = "p < .001"} else { pvalue = paste("p = ", apa(saved.d$p, 3, F), sep = "") }
if (stat == "Z") {
output = paste(stat, " = ", apa(saved.d$z, digits), ", ", pvalue, sep = "")
}
if (stat == "t") {
output = paste(stat, "(", saved.d$df, ")",
" = ", apa(saved.d$t, digits), ", ", pvalue, sep = "")
}
if (stat == "F") {
output = paste(stat, "(", saved.d$dfm, ", ", saved.d$dfe, ")",
" = ", apa(saved.d$F, digits), ", ", pvalue, sep = "")
}
if (stat == "X2") {
output = paste(stat, "(", saved.d$df, ")",
" = ", apa(saved.d$x2, digits), ", ", pvalue, sep = "")
}
return(output)
}
apa_M(ZMdscore, 1, input$alpha)
significant = "Your p-value is less than the alpha value, and therefore, this test would be considered statistically signifcant."
not_sig = "Your p-value is greater than the alpha value, and therefore, this test would be considered not statistically significant."
no_zero = "Your confidence interval does not include zero, and therefore, you might conclude that this effect size is different from zero."
yes_zero = "Your confidence interval does include zero, and therefore you might conclude that this effect size is similar to zero."
cohend = "This effect size is traditionally interpreted as the standardized difference between two mean scores."
eta = "This effect size is traditionally interpreted as the percent of variance accounted for in the DV by the IV(s)."
checkp = function(p, alpha) {
if (p <= alpha) { output = significant } else { output = not_sig }
return(output)}
checkzero = function(low, high){
if (low <= 0 & high >= 0) { output = yes_zero
} else if (low >= 0 & high <= 0) { output = yes_zero
} else { output = no_zero }
return(output)}
apa_d = function(saved.d, alpha, digits = 2) {
output = paste("d = ", apa(saved.d$d, digits),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$dlow, digits),
", ", apa(saved.d$dhigh, digits), "]", sep = "")
return(output)}
apa_M = function(saved.d, meanno = 1, alpha, digits = 2) {
if (meanno == 1) {
output = paste("M = ", apa(saved.d$M1, digits), #report mean
", SD = ", apa(saved.d$sd1, digits), #report sd
", SE = ", apa(saved.d$se1, digits), #report se
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$M1low, 2), #report low
", ", apa(saved.d$M1high, digits), "]", sep = "") #report high
return(output)}
if (meanno == 2) {
output = paste("M = ", apa(saved.d$M2, digits), #report mean
", SD = ", apa(saved.d$sd2, digits), #report sd
", SE = ", apa(saved.d$se2, digits), #report se
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$M2low, 2), #report low
", ", apa(saved.d$M2high, digits), "]", sep = "") #report high
return(output)}
}
apa_stat = function(saved.d, stat = "t", digits = 2) {
if (saved.d$p < .001) { pvalue = "p < .001"} else { pvalue = paste("p = ", apa(saved.d$p, 3, F), sep = "") }
if (stat == "Z") {
output = paste(stat, " = ", apa(saved.d$z, digits), ", ", pvalue, sep = "")
}
if (stat == "t") {
output = paste(stat, "(", saved.d$df, ")",
" = ", apa(saved.d$t, digits), ", ", pvalue, sep = "")
}
if (stat == "F") {
output = paste(stat, "(", saved.d$dfm, ", ", saved.d$dfe, ")",
" = ", apa(saved.d$F, digits), ", ", pvalue, sep = "")
}
if (stat == "X2") {
output = paste(stat, "(", saved.d$df, ")",
" = ", apa(saved.d$x2, digits), ", ", pvalue, sep = "")
}
return(output)
}
apa_M(ZMdscore, 1, input$alpha)
checkp(ZMdscore$p, input$alpha)
paste("Effect Size: ", apa_d(ZMdscore, input$alpha), "<p>", #effect size
"Interpretation: ", checkzero(ZMdscore$dlow, ZMdscore$dhigh), "<p>", #effect size interpretation
"Summary Statistics: ", apa_M(ZMdscore, 1, input$alpha), "<p>", #means
"Test Statistics: ", apa_stat(ZMdscore, "Z"), "<p>", #test stats
"Interpretation: ", checkp(ZMdscore$p, input$alpha), #test interpretation
sep = "")
shiny::runApp('OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/MOTE')
input$ZMn = 100
##check for N
if (input$ZMdf != "") {
n = as.numeric(input$ZMdf) + 1
} else { n = as.numeric(input$ZMn) }
input$ZMdf = ""
##check for N
if (input$ZMdf != "") {
n = as.numeric(input$ZMdf) + 1
} else { n = as.numeric(input$ZMn) }
input$ZMse1 = ""
input$ZMsd1 = 4
input$ZMsd2 = 4
input$ZMse2 = ""
##check for SE
if (input$ZMse1 != "") {
sd1 = as.numeric(input$ZMse1) * sqrt(n)
} else { sd1 = as.numeric(input$ZMsd1) }
if (input$ZMse2 != "") {
sd2 = as.numeric(input$ZMse2) * sqrt(n)
} else { sd2 = as.numeric(input$ZMsd2) }
input$ZMmean1 = 5
input$ZMmean2 = 3
ZMdscore = d.z.mean(m1 = as.numeric(input$ZMmean1),
mu = as.numeric(input$ZMmean2),
sd1 = sd1,
sig = sd2,
n = n,
a = as.numeric(input$ZMalpha))
ZMdscore
sd1
sd2
sd2 = 5
ZMdscore = d.z.mean(m1 = as.numeric(input$ZMmean1),
mu = as.numeric(input$ZMmean2),
sd1 = sd1,
sig = sd2,
n = n,
a = as.numeric(input$ZMalpha))
ZMdscore
d.z.mean(mu = 20, m1 = 17, sig = 4, sd1 = 5, n = 100, a = .05)
ZMdscore = d.z.mean(mu = as.numeric(input$ZMmean2),
m1 = as.numeric(input$ZMmean1),
sig = sd2,
sd1 = sd1,
n = n,
a = as.numeric(input$ZMalpha))
ZMdscore
d.z.mean
input$alpha
qnorm(input$alpha/2)
qnorm(as.numeric(input$ZMalpha) / 2)
qnorm(as.numeric(input$ZMalpha) / 2, lower.tail = F)
as.numeric(input$ZMalpha)
as.numeric(input$ZMalpha) / 2
input$ZMalpha
input$ZMalpha = .05
ZMdscore = d.z.mean(mu = as.numeric(input$ZMmean2),
m1 = as.numeric(input$ZMmean1),
sig = sd2,
sd1 = sd1,
n = n,
a = as.numeric(input$ZMalpha))
ZMdscore
##run this thing
library(roxygen2)
roxygen2::roxygenise()
##set your working directory to package file
setwd("~/OneDrive - Missouri State University/RESEARCH/2 projects/MOTE")
##run this thing
library(roxygen2)
roxygen2::roxygenise()
##then run this to update
devtools::install_github("doomlab/MOTE")
ZMdscore = d.z.mean(mu = as.numeric(input$ZMmean2),
m1 = as.numeric(input$ZMmean1),
sig = sd2,
sd1 = sd1,
n = n,
a = as.numeric(input$ZMalpha))
ZMdscore
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/MOTE')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/MOTE')
d.z.z
d.z.mean
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/MOTE')
