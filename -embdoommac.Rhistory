"dlow" = dlow,
"dhigh" = dhigh,
"mdiff" = mdiff, #mean stats
"Mlow" = Mlow,
"Mhigh" = Mhigh,
"sddiff" = sddiff,
"se" = se,
"n" = n, #sample stats
"df" = (n - 1),
"t" = t, #sig stats
"p" = p,
"estimate" = paste("$d$ = ", apa(d,2,T), ", ", (1-a)*100, "\\% CI [",
apa(dlow,2,T), ", ", apa(dhigh,2,T), "]", sep = ""),
"statistic" = paste("$t$(", (n-1), ") = ", apa(t,2,T), ", $p$ ", reportp, sep = "")
)
return(output)
}
d.dep.t.diff(2,1,10)
d.dep.t.diff(2,1)
devtools::check()
??pf
?pf
##run this thing
library(roxygen2)
roxygen2::roxygenise()
##then run this to update
devtools::install_github("doomlab/MOTE")
##then run this to update
devtools::install_github("doomlab/MOTE")
devtools::check()
##run this thing
library(roxygen2)
roxygen2::roxygenise()
devtools
devtools::check()
roxygen2::roxygenise()
devtools::check()
a = 0.01
if (a < 0 || a > 1)
{cheese = "stuff"}
a = 103
if (a < 0 || a > 1)
{cheese = 2}
library(MOTE)
?d.dep.t.avg
library(roxygen2)
roxygenize()
devtools::install_github("doomlab/MOTE")
library(MOTE)
data("indt_data")
View(indt_data)
delta.ind.t(mean(indt_data$correctq[group == 1]),
mean(indt_data$correctq[group == 2]),
sd(indt_data$correctq[group == 1]),
sd(indt_data$correctq[group == 2]),
length(indt_data$correctq[group == 1]),
length(indt_data$correctq[group == 2]),
.05)
library(MOTE)
delta.ind.t(mean(indt_data$correctq[group == 1]),
mean(indt_data$correctq[group == 2]),
sd(indt_data$correctq[group == 1]),
sd(indt_data$correctq[group == 2]),
length(indt_data$correctq[group == 1]),
length(indt_data$correctq[group == 2]),
.05)
data("indt_data")
delta.ind.t(mean(indt_data$correctq[group == 1]),
mean(indt_data$correctq[group == 2]),
sd(indt_data$correctq[group == 1]),
sd(indt_data$correctq[group == 2]),
length(indt_data$correctq[group == 1]),
length(indt_data$correctq[group == 2]),
.05)
delta.ind.t(mean(indt_data$correctq[group == 1]),
mean(indt_data$correctq[indt_data$group == 2]),
sd(indt_data$correctq[indt_data$group == 1]),
sd(indt_data$correctq[indt_data$group == 2]),
length(indt_data$correctq[indt_data$group == 1]),
length(indt_data$correctq[indt_data$group == 2]),
.05)
delta.ind.t(mean(indt_data$correctq[indt_data$group == 1]),
mean(indt_data$correctq[indt_data$group == 2]),
sd(indt_data$correctq[indt_data$group == 1]),
sd(indt_data$correctq[indt_data$group == 2]),
length(indt_data$correctq[indt_data$group == 1]),
length(indt_data$correctq[indt_data$group == 2]),
.05)
hyp = t.test(correctq ~ group, data = indt_data)
d.ind.t.t(t = -2.6599, n1 = 4, n2 = 4, a = .05)
d.ind.t(17.75, 23, 3.30, 2.16, 4, 4, .05)
d.ind.t.t(t = -2.6599, n1 = 4, n2 = 4, a = .05)
delta.ind.t(mean(indt_data$correctq[group == 1]),
#'             mean(indt_data$correctq[group == 2]),
#'             sd(indt_data$correctq[group == 1]),
#'             sd(indt_data$correctq[group == 2]),
#'             length(indt_data$correctq[group == 1]),
#'             length(indt_data$correctq[group == 2]),
#'             .05)
delta.ind.t(mean(indt_data$correctq[group == 1]),
mean(indt_data$correctq[group == 2]),
sd(indt_data$correctq[group == 1]),
sd(indt_data$correctq[group == 2]),
length(indt_data$correctq[group == 1]),
length(indt_data$correctq[group == 2]),
.05)
delta.ind.t(mean(indt_data$correctq[indt_group$group == 1]),
mean(indt_data$correctq[indt_group$group == 2]),
sd(indt_data$correctq[indt_group$group == 1]),
sd(indt_data$correctq[indt_group$group == 2]),
length(indt_data$correctq[indt_group$group == 1]),
length(indt_data$correctq[indt_group$group == 2]),
.05)
#'     delta.ind.t(mean(indt_data$correctq[indt_data$group == 1]),
#'             mean(indt_data$correctq[indt_data$group == 2]),
#'             sd(indt_data$correctq[indt_data$group == 1]),
#'             sd(indt_data$correctq[indt_data$group == 2]),
#'             length(indt_data$correctq[indt_data$group == 1]),
#'             length(indt_data$correctq[indt_data$group == 2]),
#'             .05)
delta.ind.t(mean(indt_data$correctq[indt_data$group == 1]),
mean(indt_data$correctq[indt_data$group == 2]),
sd(indt_data$correctq[indt_data$group == 1]),
sd(indt_data$correctq[indt_data$group == 2]),
length(indt_data$correctq[indt_data$group == 1]),
length(indt_data$correctq[indt_data$group == 2]),
#'             .05)
delta.ind.t(mean(indt_data$correctq[indt_data$group == 1]),
mean(indt_data$correctq[indt_data$group == 2]),
sd(indt_data$correctq[indt_data$group == 1]),
sd(indt_data$correctq[indt_data$group == 2]),
length(indt_data$correctq[indt_data$group == 1]),
length(indt_data$correctq[indt_data$group == 2]),
.05)
delta.ind.t(m1 = 17.75, m2 = 23,
sd1 = 3.30, sd2 = 2.16,
n1 = 4, n2 = 4, a = .05)
g.ind.t
g.ind.t(17.75, 23, 3.30, 2.16, 4, 4, .05)
library(roxygen2)
roxygenize()
devtools::install_github("doomlab/MOTE")
shiny::runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/data-dictionary/dataspice2.0')
library(MOTE)
library(MOTE)
?d.dep.t.avg
shiny::runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/scip_wordspace')
devtools::install_github("doomlab/MOTE")
library(MOTE)
?d.prop
d.prop <- function (p1, p2, n1, n2, a = .05) {
if (missing(p1)){
stop("Be sure to include p1 for the first proportion.")
}
if (p1 > 1 | p2 > 1 | p1 < 0 | p2 < 0){
stop("Be sure to enter your values as proportions,
rather than percentages, values should be less than 1.
Also make sure all proportion values are positive.")
}
if (missing(p2)){
stop("Be sure to include p2 for the second proportion.")
}
if (missing(n1)){
stop("Be sure to include the sample size n1 for the first group.")
}
if (missing(n2)){
stop("Be sure to include the sample size n2 for the second group.")
}
if (a < 0 || a > 1) {
stop("Alpha should be between 0 and 1.")
}
ppooled <- (p1 * n1 + p2 * n2) / (n1 + n2)
se <- sqrt(ppooled * (1 - ppooled) * ((1 / n1) + (1 / n2)))
z <- (p1 - p2)/ se
p <- pnorm(abs(z), lower.tail = F) * 2
se1 <- sqrt((p1 * (1 - p1) / n1))
se2 <- sqrt((p2 * (1 - p2) / n2))
z1 <- p1 / se1
z2 <- p2 / se2
z1low <- z1 - qnorm(a / 2, lower.tail = F) * se1
z1high <- z1 + qnorm(a / 2, lower.tail = F) * se1
z2low <- z2 - qnorm(a / 2, lower.tail = F) * se2
z2high <- z2 + qnorm(a / 2, lower.tail = F) * se2
d <- z1 - z2
dlow <- d - qnorm(a / 2, lower.tail = F) * se
dhigh <- d + qnorm(a / 2, lower.tail = F) * se
if (p < .001) {reportp = "< .001"} else {reportp = paste("= ", p, sep = "")}
output = list("d" = d, #d stats
"dlow" = dlow,
"dhigh" = dhigh,
"p1" = p1, #group 1 stats
"se1" = se1,
"z1" = z1,
"z1low" = z1low,
"z1high" = z1high,
"p2" = p2, #group 2 stats
"se2" = se2,
"z2" = z2,
"z2low" = z2low,
"z2high" = z2high,
"n1" = n1, #sample stats
"n2" = n2,
"z" = z, #sig stats,
"ppooled" = ppooled,
"se" = se,
"p" = p,
"estimate" = paste("$d_prop$ = ", apa(d,2,T), ", ", (1-a)*100, "\\% CI [",
apa(dlow,2,T), ", ", apa(dhigh,2,T), "]", sep = ""),
"statistic" = paste("$Z$", " = ", apa(z,2,T), ", $p$ ",
reportp, sep = "")
)
return(output)
}
d.prop(p1 = .25, p2 = .35, n1 = 100, n2 = 100, a = .05)
d.prop <- function (p1, p2, n1, n2, a = .05) {
if (missing(p1)){
stop("Be sure to include p1 for the first proportion.")
}
if (p1 > 1 | p2 > 1 | p1 < 0 | p2 < 0){
stop("Be sure to enter your values as proportions,
rather than percentages, values should be less than 1.
Also make sure all proportion values are positive.")
}
if (missing(p2)){
stop("Be sure to include p2 for the second proportion.")
}
if (missing(n1)){
stop("Be sure to include the sample size n1 for the first group.")
}
if (missing(n2)){
stop("Be sure to include the sample size n2 for the second group.")
}
if (a < 0 || a > 1) {
stop("Alpha should be between 0 and 1.")
}
ppooled <- (p1 * n1 + p2 * n2) / (n1 + n2)
se <- sqrt(ppooled * (1 - ppooled) * ((1 / n1) + (1 / n2)))
z <- (p1 - p2)/ se
p <- pnorm(abs(z), lower.tail = F) * 2
se1 <- sqrt((p1 * (1 - p1) / n1))
se2 <- sqrt((p2 * (1 - p2) / n2))
z1 <- p1 / se1
z2 <- p2 / se2
z1low <- z1 - qnorm(a / 2, lower.tail = F) * se1
z1high <- z1 + qnorm(a / 2, lower.tail = F) * se1
z2low <- z2 - qnorm(a / 2, lower.tail = F) * se2
z2high <- z2 + qnorm(a / 2, lower.tail = F) * se2
d <- z1 - z2
dlow <- d - qnorm(a / 2, lower.tail = F) * se
dhigh <- d + qnorm(a / 2, lower.tail = F) * se
if (p < .001) {reportp = "< .001"} else {reportp = paste("= ", p, sep = "")}
output = list("d" = d, #d stats
"dlow" = dlow,
"dhigh" = dhigh,
"p1" = p1, #group 1 stats
"se1" = se1,
"z1" = z1,
"z1low" = z1low,
"z1high" = z1high,
"p2" = p2, #group 2 stats
"se2" = se2,
"z2" = z2,
"z2low" = z2low,
"z2high" = z2high,
"n1" = n1, #sample stats
"n2" = n2,
"z" = z, #sig stats,
"ppooled" = ppooled,
"se" = se,
"p" = p,
"estimate" = paste("$d_prop$ = ", apa(d,2,T), ", ", (1-a)*100, "\\% CI [",
apa(dlow,2,T), ", ", apa(dhigh,2,T), "]", sep = ""),
"statistic" = paste("$Z$", " = ", apa(z,2,T), ", $p$ ",
apa(reportp,3,F), sep = "")
)
return(output)
}
d.prop(p1 = .25, p2 = .35, n1 = 100, n2 = 100, a = .05)
d.prop <- function (p1, p2, n1, n2, a = .05) {
if (missing(p1)){
stop("Be sure to include p1 for the first proportion.")
}
if (p1 > 1 | p2 > 1 | p1 < 0 | p2 < 0){
stop("Be sure to enter your values as proportions,
rather than percentages, values should be less than 1.
Also make sure all proportion values are positive.")
}
if (missing(p2)){
stop("Be sure to include p2 for the second proportion.")
}
if (missing(n1)){
stop("Be sure to include the sample size n1 for the first group.")
}
if (missing(n2)){
stop("Be sure to include the sample size n2 for the second group.")
}
if (a < 0 || a > 1) {
stop("Alpha should be between 0 and 1.")
}
ppooled <- (p1 * n1 + p2 * n2) / (n1 + n2)
se <- sqrt(ppooled * (1 - ppooled) * ((1 / n1) + (1 / n2)))
z <- (p1 - p2)/ se
p <- pnorm(abs(z), lower.tail = F) * 2
se1 <- sqrt((p1 * (1 - p1) / n1))
se2 <- sqrt((p2 * (1 - p2) / n2))
z1 <- p1 / se1
z2 <- p2 / se2
z1low <- z1 - qnorm(a / 2, lower.tail = F) * se1
z1high <- z1 + qnorm(a / 2, lower.tail = F) * se1
z2low <- z2 - qnorm(a / 2, lower.tail = F) * se2
z2high <- z2 + qnorm(a / 2, lower.tail = F) * se2
d <- z1 - z2
dlow <- d - qnorm(a / 2, lower.tail = F) * se
dhigh <- d + qnorm(a / 2, lower.tail = F) * se
if (p < .001) {reportp = "< .001"} else {reportp = paste("= ", apa(p,3,F), sep = "")}
output = list("d" = d, #d stats
"dlow" = dlow,
"dhigh" = dhigh,
"p1" = p1, #group 1 stats
"se1" = se1,
"z1" = z1,
"z1low" = z1low,
"z1high" = z1high,
"p2" = p2, #group 2 stats
"se2" = se2,
"z2" = z2,
"z2low" = z2low,
"z2high" = z2high,
"n1" = n1, #sample stats
"n2" = n2,
"z" = z, #sig stats,
"ppooled" = ppooled,
"se" = se,
"p" = p,
"estimate" = paste("$d_prop$ = ", apa(d,2,T), ", ", (1-a)*100, "\\% CI [",
apa(dlow,2,T), ", ", apa(dhigh,2,T), "]", sep = ""),
"statistic" = paste("$Z$", " = ", apa(z,2,T), ", $p$ ",
reportp, sep = "")
)
return(output)
}
d.prop(p1 = .25, p2 = .35, n1 = 100, n2 = 100, a = .05)
?d.dep.t.rm
gift = t.test(singt_data, mu = 1080, alternative = "two.sided")
gift
d.single.t(m = 1370, u = 1080, sd = 112.7, n = 14, a = .05)
d.single.t(gift$estimate, gift$null.value,
sd(singt_data$SATscore),
length(singt_data$SATscore), .05)
d.single.t.t(gift$statistic, length(singt_data$SATscore), .05)
d.z.z(2.5, 4, 100, .05)
d.z.z(z = 2.5, n = 100, a = .05)
d.z.z(z = 2.5, sig = 4, n = 100, a = .05)
?d.prop
?d.single.t
significant = "Your <i>p</i>-value is less than the alpha value, and therefore, this test would be considered statistically significant."
not_sig = "Your <i>p</i>-value is greater than the alpha value, and therefore, this test would be considered not statistically significant."
no_zero = "Your confidence interval does not include zero, and therefore, you might conclude that this effect size is different from zero."
yes_zero = "Your confidence interval does include zero, and therefore, you might conclude that this effect size is similar to zero."
na_zero = "Your confidence interval includes NA, which indicates that the limit cannot be found. When this occurs on the lower limit, that implies that the effect size is similar to zero."
cohend = "This effect size is traditionally interpreted as the standardized difference between two mean scores."
eta = "This effect size is traditionally interpreted as the percent of variance accounted for in the DV by the IV(s)."
odds_describe = "This effect size is traditionally interpreted as like likelihood of group 1 to group 2. Therefore, an odds of 1 indicates they are equally likely. Odds less than 1 indicate that group 2 is more likely, and odds greater than 1 indicate that group 1 is more likely."
odds_no = "Your confidence interval does not include one, and therefore, you might conclude that this effect size is different from one."
odds_yes = "Your confidence interval does include one, and therefore, you might conclude that this effect size is similar to one."
checkp = function(p, alpha) {
p = as.numeric(p)
alpha = as.numeric(alpha)
if (p <= alpha) { output = significant } else { output = not_sig }
return(output)}
checkzero = function(low, high){
if (is.na(low) | is.na(high)) { output = na_zero
} else if (low <= 0 & high >= 0) { output = yes_zero
} else if (low >= 0 & high <= 0) { output = yes_zero
} else { output = no_zero }
return(output)}
checkone = function(low, high){
if (is.na(low) | is.na(high)) { output = na_zero
} else if (low <= 1 & high >= 1) { output = odds_yes
} else if (low >= 1 & high <= 1) { output = odds_yes
} else { output = odds_no }
return(output)}
apa_d = function(saved.d, alpha, digits = 2) {
output = paste("<i>d</i> = ", apa(saved.d$d, digits),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$dlow, digits),
", ", apa(saved.d$dhigh, digits), "]", sep = "")
return(output)}
apa_var = function(saved.d, alpha, digits = 2, type = "eta") {
if (type == "eta") {
output = paste("<i>eta^2</i> = ", apa(saved.d$eta, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$etalow, digits, leading = F),
", ", apa(saved.d$etahigh, digits, leading = F), "]", sep = "")
}
if (type == "etap") {
output = paste("<i>eta_p^2</i> = ", apa(saved.d$eta, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$etalow, digits, leading = F),
", ", apa(saved.d$etahigh, digits, leading = F), "]", sep = "")
}
if (type == "ges") {
output = paste("<i>eta_G^2</i> = ", apa(saved.d$ges, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$geslow, digits, leading = F),
", ", apa(saved.d$geshigh, digits, leading = F), "]", sep = "")
}
if (type == "omega") {
output = paste("<i>omega^2</i> = ", apa(saved.d$omega, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$omegalow, digits, leading = F),
", ", apa(saved.d$omegahigh, digits, leading = F), "]", sep = "")
}
if (type == "omegap") {
output = paste("<i>omega_p^2</i> = ", apa(saved.d$omega, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$omegalow, digits, leading = F),
", ", apa(saved.d$omegahigh, digits, leading = F), "]", sep = "")
}
if (type == "omegag") {
output = paste("<i>omega_g^2</i> = ", apa(saved.d$omega, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$omegalow, digits, leading = F),
", ", apa(saved.d$omegahigh, digits, leading = F), "]", sep = "")
}
if (type == "epsilon") {
output = paste("<i>epsilon^2</i> = ", apa(saved.d$epsilon, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$epsilonlow, digits, leading = F),
", ", apa(saved.d$epsilonhigh, digits, leading = F), "]", sep = "")
}
if (type == "r") {
output = paste("<i>r</i> = ", apa(saved.d$r, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$rlow, digits, leading = F),
", ", apa(saved.d$rhigh, digits, leading = F), "]", sep = "")
}
if (type == "R2") {
output = paste("<i>R^2</i> = ", apa(saved.d$R2, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$R2low, digits, leading = F),
", ", apa(saved.d$R2high, digits, leading = F), "]", sep = "")
}
if (type == "v") {
output = paste("<i>V</i> = ", apa(saved.d$v, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$vlow, digits, leading = F),
", ", apa(saved.d$vhigh, digits, leading = F), "]", sep = "")
}
if (type == "o") {
output = paste("<i>Odds</i> = ", apa(saved.d$odds, digits, leading = F),
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$olow, digits, leading = F),
", ", apa(saved.d$ohigh, digits, leading = F), "]", sep = "")
}
return(output)}
apa_M = function(saved.d, meanno = 1, alpha, digits = 2) {
if (meanno == 0) {
output = paste("<i>M</i> = ", apa(saved.d$m, digits), #report mean
", <i>SD</i> = ", apa(saved.d$sd, digits), #report sd
", <i>SE</i> = ", apa(saved.d$se, digits), #report se
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$Mlow, 2), #report low
", ", apa(saved.d$Mhigh, digits), "]", sep = "") #report high
}
if (meanno == 1) {
output = paste("<i>M</i> = ", apa(saved.d$M1, digits), #report mean
", <i>SD</i> = ", apa(saved.d$sd1, digits), #report sd
", <i>SE</i> = ", apa(saved.d$se1, digits), #report se
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$M1low, 2), #report low
", ", apa(saved.d$M1high, digits), "]", sep = "") #report high
return(output)}
if (meanno == 2) {
output = paste("<i>M</i> = ", apa(saved.d$M2, digits), #report mean
", <i>SD</i> = ", apa(saved.d$sd2, digits), #report sd
", <i>SE</i> = ", apa(saved.d$se2, digits), #report se
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$M2low, 2), #report low
", ", apa(saved.d$M2high, digits), "]", sep = "") #report high
return(output)}
}
apa_diff = function(saved.d, alpha, digits = 2) {
output = paste("<i>Mdiff</i> = ", apa(saved.d$mdiff, digits), #report mean
", <i>SDdiff</i> = ", apa(saved.d$sddiff, digits), #report sd
", <i>SE</i> = ", apa(saved.d$se, digits), #report se
", ", (1-as.numeric(alpha))*100, "% CI [", apa(saved.d$Mlow, 2), #report low
", ", apa(saved.d$Mhigh, digits), "]", sep = "") #report high
return(output)}
apa_stat = function(saved.d, stat, digits = 2) {
if (saved.d$p < .001) { pvalue = "<i>p</i> < .001"} else { pvalue = paste("<i>p</i> = ", apa(saved.d$p, 3, F), sep = "") }
if (stat == "Z") { output = paste("<i>Z</i>", " = ", apa(saved.d$z, digits), ", ", pvalue, sep = "")}
if (stat == "t") { output = paste("<i>t</i>", "(", saved.d$df, ")", " = ", apa(saved.d$t, digits), ", ", pvalue, sep = "")}
if (stat == "tr") { output = paste("<i>t</i>", "(", saved.d$dfe, ")", " = ", apa(saved.d$t, digits), ", ", pvalue, sep = "")}
if (stat == "F") { output = paste("<i>F</i>", "(", saved.d$dfm, ", ", saved.d$dfe, ")", " = ", apa(saved.d$F, digits), ", ", pvalue, sep = "")}
if (stat == "X2") { output = paste("X^2", "(", saved.d$df, ")", " = ", apa(saved.d$x2, digits), ", ", pvalue, sep = "")}
return(output)}
help_console <- function(topic, format=c("text", "html", "latex", "Rd"),
lines=NULL, before=NULL, after=NULL) {
format=match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
helpfile = utils:::.getHelpFile(help(topic))
hs <- capture.output(switch(format,
text=tools:::Rd2txt(helpfile),
html=tools:::Rd2HTML(helpfile),
latex=tools:::Rd2latex(helpfile),
Rd=tools:::prepare_Rd(helpfile)
)
)
if(!is.null(lines)) hs <- hs[lines]
hs <- c(before, hs, after)
cat(hs, sep="\n")
invisible(hs)
}
temp = d.single.t(4,5,1,10,.05)
temp
apa_M(temp, 0, .05)
shiny::runApp('~/OneDrive - Missouri State University/RESEARCH/2 projects/shiny-server/MOTE')
